// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  Pending
  Processing
  Shipped
  Delivered
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  role          Role            @default(USER)
  status        Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  cart          Cart[]
  Order         Order[]
  profile       Profile[]
  ReviewProduct ReviewProduct[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  firstname String?
  lastname  String?
  image     String?
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  slug          String
  description   String
  price         Float
  tax           Float
  status        Boolean         @default(true)
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProductImage  ProductImage[]
  Cart          Cart[]
  ReviewProduct ReviewProduct[]
  OrderDetails  OrderDetails[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discount {
  id        Int      @id @default(autoincrement())
  code      String
  discount  Float
  status    Boolean  @default(true)
  Order     Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewProduct {
  id                  Int      @id @default(autoincrement())
  user                User     @relation(fields: [userId], references: [id])
  userId              Int
  product             Product  @relation(fields: [productId], references: [id])
  productId           Int
  comment             String
  ratingMaterial      Int
  ratingFunction      Int
  ratingComplementary Int
  ratingUsed          Int
  ratingWorth         Int
  totalRating         Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           Int            @id @default(autoincrement())
  invoiceNo    String
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  discount     Discount?      @relation(fields: [discountId], references: [id])
  discountId   Int?
  total        Float          @default(0)
  status       Status         @default(Pending)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderImage   OrderImage[]
  OrderDetails OrderDetails[]
}

model OrderDetails {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
  price     Float 
  subtotal  Float   @default(0)
}

model OrderImage {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}